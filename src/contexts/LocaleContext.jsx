import React, { createContext, useState, useContext, useEffect } from 'react';

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const LocaleContext = createContext(null);

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
export const SUPPORTED_LANGUAGES = {
  en: { code: 'en', name: 'English', nativeName: 'English', flag: 'üá∫üá∏' },
  ru: { code: 'ru', name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  es: { code: 'es', name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
  fr: { code: 'fr', name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
  de: { code: 'de', name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' },
  zh: { code: 'zh', name: 'Chinese', nativeName: '‰∏≠Êñá', flag: 'üá®üá≥' },
  ja: { code: 'ja', name: 'Japanese', nativeName: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
  ar: { code: 'ar', name: 'Arabic', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶', rtl: true },
  he: { code: 'he', name: 'Hebrew', nativeName: '◊¢◊ë◊®◊ô◊™', flag: 'üáÆüá±', rtl: true }
};

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
export const LocaleProvider = ({ children }) => {
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
  const getInitialLanguage = () => {
    const savedLanguage = localStorage.getItem('cryptoDashboardLanguage');
    if (savedLanguage && SUPPORTED_LANGUAGES[savedLanguage]) {
      return savedLanguage;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    const browserLang = navigator.language.split('-')[0];
    return SUPPORTED_LANGUAGES[browserLang] ? browserLang : 'en';
  };

  const [currentLanguage, setCurrentLanguage] = useState(getInitialLanguage);
  const [translations, setTranslations] = useState({});

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  useEffect(() => {
    const loadTranslations = async () => {
      try {
        const module = await import(`../locales/${currentLanguage}.json`);
        setTranslations(module.default);
      } catch (error) {
        console.error(`Failed to load translations for ${currentLanguage}:`, error);
        // Fallback to English
        const fallback = await import('../locales/en.json');
        setTranslations(fallback.default);
      }
    };

    loadTranslations();
  }, [currentLanguage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const changeLanguage = (languageCode) => {
    if (SUPPORTED_LANGUAGES[languageCode]) {
      setCurrentLanguage(languageCode);
      localStorage.setItem('cryptoDashboardLanguage', languageCode);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç lang —É html —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      document.documentElement.lang = languageCode;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É
  const t = (key, params = {}) => {
    const keys = key.split('.');
    let value = translations;
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
    for (const k of keys) {
      value = value?.[k];
      if (value === undefined) {
        console.warn(`Translation key "${key}" not found for language "${currentLanguage}"`);
        return key; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
      }
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ
    if (typeof value === 'string' && params) {
      return Object.keys(params).reduce((str, param) => {
        return str.replace(new RegExp(`{{${param}}}`, 'g'), params[param]);
      }, value);
    }
    
    return value;
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
  const currentLanguageInfo = SUPPORTED_LANGUAGES[currentLanguage];

  const value = {
    currentLanguage,
    currentLanguageInfo,
    changeLanguage,
    t,
    supportedLanguages: SUPPORTED_LANGUAGES
  };
useEffect(() => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  document.documentElement.dir = currentLanguageInfo.rtl ? 'rtl' : 'ltr';
}, [currentLanguageInfo]);
  return (
    <LocaleContext.Provider value={value}>
      {children}
    </LocaleContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
export const useLocale = () => {
  const context = useContext(LocaleContext);
  if (!context) {
    throw new Error('useLocale must be used within a LocaleProvider');
  }
  return context;
};